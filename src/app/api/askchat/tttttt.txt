import query from "@/src/lib/queryApi";
import { NextRequest, NextResponse } from "next/server";
import admin from "firebase-admin";
import { Message } from "@/type";
import { adminDB } from "@/firabaseAdmin";

export const POST = async (req: NextRequest) => {
  try {
    const reqBody = await req.json();

    const { prompt, id, model, session } = reqBody;

    if (!prompt) {
      return NextResponse.json(
        { message: "Please provide a prompt!" },
        { status: 400 }
      );
    }

    if (!id || typeof id !== "string") {
      return NextResponse.json(
        { message: "Invalid chat ID!" },
        { status: 400 }
      );
    }

    if (!session || typeof session !== "string") {
      return NextResponse.json(
        { message: "Invalid session ID!" },
        { status: 400 }
      );
    }

    const response = await query(prompt, id, model).catch((err) => {
      console.error("Query function error:", err);
      throw new Error("Failed to fetch response from query.");
    });

    const message: Message = {
      text: response || "DedomenaLLM was unable to find an answer for that!",
      createdAt: admin.firestore.Timestamp.now(),
      user: {
        _id: "ChatGPT",
        name: "Dedomena",
        avatar:
          "https://pbs.twimg.com/profile_images/954494635153543169/OIYn9cYM_400x400.jpg",
      },
    };

    await adminDB
      .collection("users")
      .doc(session)
      .collection("chats")
      .doc(id)
      .collection("messages")
      .add(message);

    return NextResponse.json(
      { answer: message.text, message: "Dedomena has responded!", success: true },
      { status: 200 }
    );
  } catch (error) {
    console.error("Error in /api/askchat:", error);
    return NextResponse.json(
      { error: error.message || "Internal server error" },
      { status: 500 }
    );
  }
};





NEWNEWNEWNEWNEWNEWNEWNEWEN (from github original)

import query from "@/src/lib/queryApi";
import { NextRequest, NextResponse } from "next/server";
import admin from "firebase-admin";
import { Message } from "@/type";
import { adminDB } from "@/firabaseAdmin";

export const POST = async (req: NextRequest) => {
  const reqBody = await req.json();

  const { prompt, id, model, session } = await reqBody;

  try {
    if (!prompt) {
      return NextResponse.json(
        {
          message: "Please provide a propmt!",
        },
        { status: 400 }
      );
    }

    if (!id) {
      return NextResponse.json(
        {
          message: "Please provide a valid chat ID!",
        },
        { status: 400 }
      );
    }

    const response = await query(prompt, id, model);

    const message: Message = {
      text: response || "ChatGPT was unable to find an answer for that!",
      createdAt: admin.firestore.Timestamp.now(),
      user: {
        _id: "ChatGPT",
        name: "ChatGPT",
        avatar:
          "https://res.cloudinary.com/duehd78sl/image/upload/v1729227742/logoLight_amxdpz.png",
      },
    };

    await adminDB
      .collection("users")
      .doc(session)
      .collection("chats")
      .doc(id)
      .collection("messages")
      .add(message);

    return NextResponse.json(
      {
        answer: message?.text,
        message: "ChatGPT has responded!",
        success: true,
      },
      { status: 200 }
    );
  } catch (error) {
    return NextResponse.json({ error: error }, { status: 500 });
  }
};




route.ts 5:00am version before simplifying, the query is responded but not yet return to the frontend

// import { NextRequest, NextResponse } from "next/server";
// import query from "@/src/lib/queryApi";
// import admin from "firebase-admin";
// import { adminDB } from "@/firabaseAdmin";
// import { Message } from "@/type";

// export const POST = async (req: NextRequest) => {
//   try {
//     const reqBody = await req.json();
//     const { prompt, id, model, session } = reqBody;

//     console.log("Received payload:", reqBody);

//     // Validate the payload
//     if (!prompt || !id || !model || !session) {
//       return NextResponse.json(
//         {
//           message: "Invalid payload. Ensure all fields are provided.",
//         },
//         { status: 400 }
//       );
//     }

//     const response = await query(prompt, id, model).catch((err) => {
//       console.error("Query error:", err.message);
//       return null; // Return null if the query fails
//     });

//     if (!response) {
//       return NextResponse.json(
//         {
//           error: "Failed to get a valid response from ChatGPT.",
//           message: "No response was generated due to an error.",
//         },
//         { status: 500 }
//       );
//     }

//     const message: Message = {
//       text: response,
//       createdAt: admin.firestore.Timestamp.now(),
//       user: {
//         _id: "ChatGPT",
//         name: "ChatGPT",
//         avatar:
//           "https://res.cloudinary.com/duehd78sl/image/upload/v1729227742/logoLight_amxdpz.png",
//       },
//     };

//     try {
//       await adminDB
//         .collection("users")
//         .doc(session)
//         .collection("chats")
//         .doc(id)
//         .collection("messages")
//         .add(message);

//       console.log("Message successfully saved to Firestore:", message);

//       return NextResponse.json(
//         {
//           answer: message.text,
//           message: "ChatGPT has responded.",
//           success: true,
//         },
//         { status: 200 }
//       );
//     } catch (firestoreError) {
//       console.error("Error writing message to Firestore:", firestoreError);
//       return NextResponse.json(
//         {
//           error: "Failed to save the message to Firestore.",
//           message: firestoreError.message || "Unknown error.",
//         },
//         { status: 500 }
//       );
//     }
//   } catch (error) {
//     console.error("Unexpected error in POST handler:", error);
//     return NextResponse.json(
//       {
//         error: "Unexpected server error.",
//         message: error.message || "An unknown error occurred.",
//       },
//       { status: 500 }
//     );
//   }
// };